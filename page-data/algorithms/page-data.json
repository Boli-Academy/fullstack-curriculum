{"componentChunkName":"component---src-templates-lesson-template-js","path":"/algorithms","result":{"data":{"markdownRemark":{"html":"<h1 id=\"learning-data-structure--algorithms\" style=\"position:relative;\"><a href=\"#learning-data-structure--algorithms\" aria-label=\"learning data structure  algorithms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learning data structure &#x26; algorithms</h1>\n<h4 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h4>\n<p>The book <a href=\"https://github.com/alxerg/Books-1/blob/master/Cracking%20the%20Coding%20Interview%2C%206th%20Edition%20189%20Programming%20Questions%20and%20Solutions.pdf\">Cracking the coding interview</a> by Gayle Laakman is often cited as the holy grail. You can buy it if you want, but these two playlists of her videos on YouTube is a good place to start:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLI1t_8YX-Apv-UiRlnZwqqrRT8D1RhriX\">Data structures</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLI1t_8YX-ApvMthLj56t1Rf-Buio5Y8KL\">Algorithms</a></li>\n</ul>\n<h4 id=\"about-the-playlists\" style=\"position:relative;\"><a href=\"#about-the-playlists\" aria-label=\"about the playlists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About the playlists</h4>\n<p>Start with the data structures playlist. The playlist is not entirely in order - often times the related problem solution comes before the theory. I think the actual order is : 3, 1, 2, 5, 4â€¦ etc.\ne.g you should watch</p>\n<ul>\n<li>video 3 titled <a href=\"https://www.youtube.com/watch?v=wjI1WNcIntg&#x26;list=PLI1t_8YX-Apv-UiRlnZwqqrRT8D1RhriX&#x26;index=4&#x26;t=40s\">Data Structures: Stacks &#x26; Queues</a> which discusses the theory before going through the problem solution on</li>\n<li>video 1 titled <a href=\"https://www.youtube.com/watch?v=IhJGJG-9Dx8&#x26;list=PLI1t_8YX-Apv-UiRlnZwqqrRT8D1RhriX&#x26;index=2&#x26;t=0s\">Data Structures: balanced parentheses in expression</a> and</li>\n<li>video 2 titled <a href=\"https://www.youtube.com/watch?v=7ArHz8jPglw&#x26;list=PLI1t_8YX-Apv-UiRlnZwqqrRT8D1RhriX&#x26;index=2\">Data Structures: Queue with two stacks</a></li>\n</ul>\n<h4 id=\"steps-to-mastering-data-structures-and-algorithms-using-the-playlists\" style=\"position:relative;\"><a href=\"#steps-to-mastering-data-structures-and-algorithms-using-the-playlists\" aria-label=\"steps to mastering data structures and algorithms using the playlists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps to mastering data structures and algorithms using the playlists</h4>\n<ol>\n<li>Pick one data structure a week, say watch video 3 for stacks and queues</li>\n<li>Then go through her problem solution explanation videos on stacks and queues, e.g. videos 1 and 2</li>\n<li>Go to one of the algorithm practice platforms to practice problems for the given data structure, e.g. leetcode, hackerrank, codewars, algoexpert if FSA give you guys free membership. <a href=\"#steps-to-solve-a-problem\">what are the steps to solve a problem?</a></li>\n<li>Rinse repeat go through all other videos on the data structures playlist</li>\n<li>Then go through the algorithms playlist the same way</li>\n</ol>\n<p>Thats it! these are all the steps required to ace an algorithm based technical interview!</p>\n<p><a href=\"#data-structures-vs-algorithms-vs-questionsproblems\">Wait.. so whats the relationship between Data structures and Algorithms and Questions/Problems?</a></p>\n<hr>\n<h5 id=\"data-structures-vs-algorithms-vs-questionsproblems\" style=\"position:relative;\"><a href=\"#data-structures-vs-algorithms-vs-questionsproblems\" aria-label=\"data structures vs algorithms vs questionsproblems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data structures vs Algorithms vs Questions/Problems</h5>\n<ul>\n<li>\n<p><strong>Data structures</strong> are just ways you can store data. e.g. as a <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">arrays</code>, <code class=\"language-text\">objects</code>, <code class=\"language-text\">linked list</code>, <code class=\"language-text\">stacks</code> etc. More complex data structures are just compositions of simpler data structures. e.g.</p>\n<ul>\n<li>an <code class=\"language-text\">array</code> is a composition of <code class=\"language-text\">strings</code> and/or <code class=\"language-text\">numbers</code></li>\n<li><code class=\"language-text\">stacks</code> and <code class=\"language-text\">queues</code> are different ways to put data in and out from <code class=\"language-text\">arrays</code></li>\n<li>an <code class=\"language-text\">object</code> is a composition of different types of data structures</li>\n<li><code class=\"language-text\">linked lists</code> could be implemented by chaining together <code class=\"language-text\">objects</code> etc</li>\n<li>the types of data structures available to you natively will differ from language to language, but all data structures can be implemented in all languages. e.g. Java gives you <code class=\"language-text\">stack</code> natively, but in Javascript you would implement it using arrays</li>\n<li><code class=\"language-text\">objects</code> in Javascript used as <code class=\"language-text\">hash tables</code> are the super power data structures - any problems you get, always see if you can use <code class=\"language-text\">hash tables</code> to improve efficiency</li>\n</ul>\n</li>\n<li><strong>Algorithms</strong> are common problem solving logics/patterns generally using a certain data structure that can be used to efficiently solve certain classes of problems</li>\n<li><strong>Questions/Problems</strong> are just that - they are a problem given to you for solving. Problems can be solved in many ways - it is ok to solve a problem in the easiest way that makes sense to you at first. But the goal is to eventually figure out and implement a better algorithm and data structure that generally results in a more efficient solution. There is no one correct best algorithm / data structure - all solutions will have tradeoffs in terms of the Big O of time vs. space; but there generally is an industry accepted best solution that you have to get familiar with.</li>\n</ul>\n<h5 id=\"steps-to-solve-a-problem\" style=\"position:relative;\"><a href=\"#steps-to-solve-a-problem\" aria-label=\"steps to solve a problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps to solve a problem:</h5>\n<ol>\n<li>Find the easiest, naive solution to the problem. This will often not be efficient</li>\n<li>If you have time, then find a more efficient solution</li>\n<li>Once you find more than one solution, articulate the tradeoffs between the solutions</li>\n<li>If you have even more time, is there a still more efficient solution?</li>\n<li>From all your solutions, pick one that you think will best serve the current situation</li>\n</ol>\n<hr>\n<h6 id=\"learning-notes\" style=\"position:relative;\"><a href=\"#learning-notes\" aria-label=\"learning notes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LEARNING NOTES:</h6>\n<p><strong>Algorithms are hard!</strong> So be prepared for things to completely fly over your head the first few times you look at them</p>\n<p><strong>Regarding the language</strong> - The videos for practice exercises are in <code class=\"language-text\">Java</code> programming languageâ€¦ so some of the syntax might not translate into Javascript, but the general logic is the same. You can google for interoperability, e.g. stacks are implemented using the <code class=\"language-text\">stack</code> data type in Java, but in Javascript you would use arrays</p>","frontmatter":{"path":"/algorithms","title":"Algorithms","order":"900A","section":"Job readiness","description":"Algorithms"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"900A","path":"/algorithms","title":"Algorithms"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"1B","path":"/what-is-webapp","title":"What is a web app"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}